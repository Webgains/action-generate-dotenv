# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Generate stack .env file
description: |
  This workflow is triggered by the deploy workflows to generate the .env file based on the
  example/template .env files in the repository.
 
  The contents of the .env file generated in the following order:
  1. The example/template .env file
  2. The common GitHub variables/inputs
    - inputs.name
    - inputs.environment
    - inputs.stack_name
    - inputs.aws_account_id
    - inputs.aws_region
    - inputs.domain_name
  3. The stack configuration, normally this just needs mapping to `vars.STACK_CONFIG`
  4. The stack secrets, normally this just needs mapping to `inputs.stack_secrets`
  5. Any overrides provided in the `inputs.override` JSON object

inputs:
  name:
    description: The subdomain name to deploy to
    required: true
  environment:
    description: The environment to deploy to
    required: true
  stack_name:
    description: The CloudFormation stack name
    required: true
  cdk_working_directory:
    description: The directory the CDK application is in, can be omitted if it is the root directory
    required: false
    default: .
  file:
    description: The name of the file to generate
    required: false
    default: .env
  template:
    description: The name of the example/template .env file to use
    required: false
    default: .env.dist
  aws_account_id:
    description: The AWS account ID
    required: true
  aws_region:
    description: The AWS region
    required: true
  domain_name:
    description: The service domain name
    required: true
  stack_config:
    description: JSON object of stack configuration
    required: true
  stack_secrets:
    description: JSON object of stack secrets
    required: false
    default: ''
  override:
    description: JSON object of vars to override in the .env file
    required: false
    default: ''
runs:
  using: "composite"

  steps:
    - name: Do we have secrets?
      shell: bash
      id: has_secrets
      run: |
        echo "HAS_STACK_SECRETS=$([ -n "${{ (inputs.stack_secrets != '') || '' }}" ] && echo 1 || echo 0)" >> "$GITHUB_OUTPUT"

    - name: Create dotenv file
      shell: bash
      working-directory: ${{ inputs.cdk_working_directory }}
      run: cp ${{ inputs.template }} ${{ inputs.file }}

    - name: Configure basic environment variables
      shell: bash
      working-directory: ${{ inputs.cdk_working_directory }}
      run: |
        sed -i 's|environment=.*|environment=${{ inputs.environment }}|' ${{ inputs.file }}
        sed -i 's|stackName=.*|stackName=${{ inputs.stack_name }}|' ${{ inputs.file }}
        sed -i 's|accountId=.*|accountId=${{ inputs.aws_account_id }}|' ${{ inputs.file }}
        sed -i 's|region=.*|region=${{ inputs.aws_region }}|' ${{ inputs.file }}
        sed -i 's|hostName=.*|hostName=${{ inputs.name }}|' ${{ inputs.file }}
        sed -i 's|domainName=.*|domainName=${{ inputs.domain_name }}|' ${{ inputs.file }}
        echo '${{ inputs.stack_config }}' | jq -r 'to_entries |
            .[] | 
            ["s|",.key,"=.*|",.key, "=", (.value | tostring | gsub("&";"\\&")), "|"] | 
            add' | 
          xargs -I{} -0 sed -i {} ${{ inputs.file }}

    - name: Add secrets to environment variables
      shell: bash
      working-directory: ${{ inputs.cdk_working_directory }}
      if: ${{ inputs.stack_secrets != '' }}
      run: |
        echo '${{ inputs.stack_secrets }}' | jq -r 'to_entries |
            .[] | 
            ["s|",.key,"=.*|",.key, "=", (.value | tostring | gsub("&";"\\&")), "|"] | 
            add' | 
          xargs -I{} -0 sed -i {} ${{ inputs.file }}

    - name: Apply any environment variables overrides
      shell: bash
      working-directory: ${{ inputs.cdk_working_directory }}
      if: ${{ inputs.override != '' }}
      run: |
        echo '${{ inputs.override }}' |
          jq -r 'to_entries |
            .[] | 
            ["s|",.key,"=.*|",.key, "=", (.value | tostring | gsub("&";"\\&")), "|"] | 
            add' | 
          xargs -I{} -0 sed -i {} ${{ inputs.file }}
